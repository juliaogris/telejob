// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: telejob.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Telejob_Start_FullMethodName  = "/telejob.v1.Telejob/Start"
	Telejob_Stop_FullMethodName   = "/telejob.v1.Telejob/Stop"
	Telejob_Status_FullMethodName = "/telejob.v1.Telejob/Status"
	Telejob_Logs_FullMethodName   = "/telejob.v1.Telejob/Logs"
)

// TelejobClient is the client API for Telejob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelejobClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (Telejob_LogsClient, error)
}

type telejobClient struct {
	cc grpc.ClientConnInterface
}

func NewTelejobClient(cc grpc.ClientConnInterface) TelejobClient {
	return &telejobClient{cc}
}

func (c *telejobClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, Telejob_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telejobClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, Telejob_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telejobClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Telejob_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telejobClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (Telejob_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Telejob_ServiceDesc.Streams[0], Telejob_Logs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &telejobLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Telejob_LogsClient interface {
	Recv() (*LogsResponse, error)
	grpc.ClientStream
}

type telejobLogsClient struct {
	grpc.ClientStream
}

func (x *telejobLogsClient) Recv() (*LogsResponse, error) {
	m := new(LogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelejobServer is the server API for Telejob service.
// All implementations should embed UnimplementedTelejobServer
// for forward compatibility
type TelejobServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Logs(*LogsRequest, Telejob_LogsServer) error
}

// UnimplementedTelejobServer should be embedded to have forward compatible implementations.
type UnimplementedTelejobServer struct {
}

func (UnimplementedTelejobServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedTelejobServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedTelejobServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedTelejobServer) Logs(*LogsRequest, Telejob_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}

// UnsafeTelejobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelejobServer will
// result in compilation errors.
type UnsafeTelejobServer interface {
	mustEmbedUnimplementedTelejobServer()
}

func RegisterTelejobServer(s grpc.ServiceRegistrar, srv TelejobServer) {
	s.RegisterService(&Telejob_ServiceDesc, srv)
}

func _Telejob_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelejobServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telejob_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelejobServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telejob_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelejobServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telejob_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelejobServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telejob_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelejobServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telejob_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelejobServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telejob_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelejobServer).Logs(m, &telejobLogsServer{stream})
}

type Telejob_LogsServer interface {
	Send(*LogsResponse) error
	grpc.ServerStream
}

type telejobLogsServer struct {
	grpc.ServerStream
}

func (x *telejobLogsServer) Send(m *LogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Telejob_ServiceDesc is the grpc.ServiceDesc for Telejob service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Telejob_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telejob.v1.Telejob",
	HandlerType: (*TelejobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Telejob_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Telejob_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Telejob_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _Telejob_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "telejob.proto",
}
